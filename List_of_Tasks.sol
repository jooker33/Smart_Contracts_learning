
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract List_of_Tasks {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;
    string public output;
    string[] public massive;
    int public nomer_zadachi;
    int public A;
    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }

    function renderHelloWorld () public pure returns (string) {
        return 'helloWorld';
    }

    struct Tasks_List {
        string task_name;
        uint timestamp;
        bool done_mark;
    }
    
    mapping(int8 => Tasks_List) task_name;
    function add_task(string task_name_in,bool done_mark_in,int8 nomer_zadachi_out) public returns(string){
        tvm.accept();
        Tasks_List one = Tasks_List(task_name_in,now,done_mark_in);
        task_name[nomer_zadachi_out]=one;
        A=nomer_zadachi_out;

        
    }
 //   function show_tasks() public returns(){
 //       for (int8 i=1; i<A;i++){
 //           return task_name[i];
//        }

 //   }
 
    function get_number_of_tasks() public returns(int){
        return A;
    }
    function get_discription_by_a_key(int8 nomer_zadachi_in) public returns(string){
        return task_name[nomer_zadachi_in].task_name;
    }
    function delete_task_by_a_key(int8 nomer_zadachi_in) public returns(string){
        delete(task_name[nomer_zadachi_in]);
        return 'Deleting is done';
    }
    function set_task_done_by_a_key(int8 nomer_zadachi_in) public returns(string){
        task_name[nomer_zadachi_in].done_mark=true;
        return 'Setting is done';
    }

}
